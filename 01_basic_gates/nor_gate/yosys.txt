1. Executing Verilog-2005 frontend: design.sv
Parsing Verilog input from `design.sv' to AST representation.
Generating RTLIL representation for module `\nor_gate3ip'.
Successfully finished Verilog frontend.

-- Running command `hierarchy' --

2. Executing HIERARCHY pass (managing design hierarchy).

-- Running command `proc' --

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

-- Running command `opt' --

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nor_gate3ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nor_gate3ip.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nor_gate3ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nor_gate3ip.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

4.16. Finished OPT passes. (There is nothing left to do.)

-- Running command `memory' --

5. Executing MEMORY pass.

5.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

5.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

5.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

-- Running command `opt' --

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nor_gate3ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nor_gate3ip.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

6.9. Finished OPT passes. (There is nothing left to do.)

-- Running command `fsm' --

7. Executing FSM pass (extract and optimize FSM).

7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

-- Running command `opt' --

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nor_gate3ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nor_gate3ip.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nor_gate3ip'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nor_gate3ip..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nor_gate3ip.

8.9. Finished OPT passes. (There is nothing left to do.)

-- Running command `show -colors 1 -viewer touch -format svg' --

9. Generating Graphviz representation of design.
Writing dot description to `/home/runner/.yosys_show.dot'.
Dumping module nor_gate3ip to page 1.
Exec: dot -Tsvg '/home/runner/.yosys_show.dot' > '/home/runner/.yosys_show.svg.new' && mv '/home/runner/.yosys_show.svg.new' '/home/runner/.yosys_show.svg'
Exec: touch '/home/runner/.yosys_show.svg' &

-- Writing to `synth.v' using backend `verilog' --

10. Executing Verilog backend.

10.1. Executing BMUXMAP pass.

10.2. Executing DEMUXMAP pass.
Dumping module `\nor_gate3ip'.

End of script. Logfile hash: 36669b49f0, CPU: user 0.03s system 0.02s, MEM: 10.71 MB peak
Yosys 0.38+113 (git sha1 91fbd5898, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 83% 1x show (0 sec), 5% 8x opt_expr (0 sec), ...
Finding SVG file...
./.yosys_show.svg
